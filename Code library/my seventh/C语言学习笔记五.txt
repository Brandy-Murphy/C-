操作符分类：
算术操作符  移位操作符（只能用于整数）  位操作符（只能用于整数） 
赋值操作符  单目操作符  关系操作符  逻辑操作符
条件操作符  逗号操作符  
下标引用操,函数调用和结构成员

复合赋值符
+=
-+
*=
/=
%=
>>=
<<=
&=
|=
^=

单目操作符：
特点：“a+b  ‘+’ 数目操作符

单目操作符
只有一个操作符“
！    反逻辑操作符：
int main()
{
	int a = 10;//非零为真
	printf("%d\n", !a);//a变成了0；
	return 0;
}

-       负值操作符   //将一个数加上一个负号
+      正值操作符   //加上正号
&      取地址操作符   //一般配合指针使用 指针变量 如int*...  char*...   *解引用操作符
sizeof   //计算变量的大小 单位是字节（可以直接计算变量类型）

int main()
{
	short s = 0;
	int a = 10;
	printf("%d\n", sizeof(s = a + 5));//2  sizeof运算的以被赋值的变量为准，
	                                      /*short类被赋值后只能为short*/
	printf("%d\n", s);//0  sizeof里的表达式奴会参与运算
	return 0;
}
~     按位取反   //按二进制取反

++     前置,后置
--       前置,后置
#include <stdio.h>
int main()
{
	int a = 10;
	//printf("%d\n", ++a);//前置++，先++在使用
	printf("%d\n", a++);//后置++，先使用 在++
	//-- 也一样

	return 0;
}
*     间接引用操作符
(类型)     强制类型转换//  将一个数强制转化为另一个类型的数  int a = (int)3.14;


关系操作符
>
>=
<
<=
!=     用于测试“不相等”
==    用于测试“相等”


逻辑操作符   
（切勿与按位与，按位或混淆）
&&       逻辑与  只要有一个为假 就为假  只要左边结果为假 右边的结果一律不再进行；
||           逻辑或  只要有一个为真 就为真  只要左边结果为真，右边就不再进行计算；


条件操作符（三目操作符）
exp1？exp2：exp3   如果exp1为真，就计算exp2 exp2为整个表达式结果
                               如果exp1为假，就计算exp3 exp3为整个表达式结果
//条件操作符(三目操作符)
#include <stdio.h>
int main()
{
	//int a = 0;
	//int b = 0;
	//if (a > 5)
	//	b = 5;
	//else
	//	b = -5;
	//printf("%d\n", b);
	////用条件操作符表达这种逻辑
	//b = (a > 5 ? 5 : -5);

	int a = 10;
	int b = 20;
	int max = 0;

	if (a > b)
		max = a;
	else
		max = b;
	//用条件操作符表达
	max = (a > b ? a : b);
	return 0;
}


逗号表达式
exp1，exp2，exp3.....expn
逗号表达式，就是用逗号隔开的表达式。从左到右依次执行，整个
表达式的结果式最后一个表达式的结果。


下标引用，函数调用和结构成员
1.[ ]下标引用操作符
操作数：一个数组名+一个索引值
2.（）函数调用操作符 接受一个或者多个操作数：第一个操作数是函数名，剩余的
操作数是传递给函数的函数



创建结构体操作符  struct
一个复杂的结构体可以包含多个变量
#include <stdio.h>
//创建一个结构体-struct
struct studen
{
	//成员变量
	char name [20];
	int age;
	char id_care [20];
};
int main()
{
	int a = 0;
	//使用struct studen创建了一个对象 叫si 并进行了初始化
	struct studen si = { "张三",20,"12345678" };
	//调用成员
	printf("%s\n", si.name);
	printf("%d\n", si.age);
	printf("%s\n", si.id_care);
	//结构体变量.成员名
	struct studen*add = &si;//取结构体成员的地址 与创建指针变量
	//调用结构体成员指针方法
	printf("%s\n", (*add).id_care);
	//另一种方法
	printf("%s\n", add->id_care);
	printf("%d\n", add->age);
	//->结构体指针   在结构体里->相当于strucd ...*...的作用
	return 0;
}



表达式求值
表达式的求值顺序一部分是由操作符的优先级和结合性决定的
有些数值可能会在运算过程中转为为其他类型数值
表达式中的字符与短整型在使用之前都会被转换为普通整形。
即：只要长度不够整形，就会提升整形

算术转换
如果某个操作符的各个操作数属于不同类型，那么除非其
中一个操作数的转换为另一个操作数否则无法进行。
以下的此次体系称为寻常算数转换，以下往上转换
long double
double
float
unsigned long int 
long int 
unsiged int
int

表达式求值一定要符合有唯一确定路径的计算方式，否则表达式就有问题！！！

操作符的属性
复杂表达式的求职有三个影响的因素
1.操作符的优先级
2.操作符的结合性
3.是否控制求值顺序

一个有问题的表达式
//表达式的求值部分有操作符的优先级决定
a*b+c*d+e*f
在计算时 由于*的优先级比较高，只能保证*的计算比+早，但优先级并不能
决定第三个*比第一个+早执行

