1.项目 ->属性 -> c/c++ -> 预处理器 -> 点击预处理器定义，加入_CRT_SECURE_NO_WARNINGS


 指针是什么
指针是一个编程语言对象，利用地址，他得知便直接指向电脑
存储器中另一个地方的值，因此将导致形象化称为指针。意思
是通过它找到以它为地址的内存单元
指针就是也个变量，变量存的是地址
  结论：
指针是用来存放地址的 地址是唯一标识一块地址空间的
指针的大小在三十二平台是4个字节 六十四位平台是八个字节


  指针与指针类型
指针类型决定了指针进行解引用的额时候，能够访问空间的大小
  //int*p  可以访问四个字节
  //char*p  可以访问一个字节
  //double*p 可以访问八个字节

指针类型决定了指针走一步走多远（指针的步长,单位字节）
int*p；p+1  ——>4
char*p;p+1  ——>1



  野指针
概念：野指针就是指针指向的位置是不可知的（随机的 不正确 不明确的）

  野指针发生的原因
1. 指针不初始化 也会被随机化
2.指针越界访问
3.指针指向的空间被释放

  如何规避野指针
1.指针要初始化 不知道要怎么初始化时，可以赋一个空指针 NULL（空指针 0）
2.小心指针越界
3.当指针指向空间被释放时，要为放至NULL
4.指针使用时，检测指针有效性 


  指针运算

数组名就是数组首元素的地址
有两个例外
1.&数组名  取地址数组名不是首元素的地址 而是整个数组
的地址 而单单一个数组名是！
2.sizeof（数组名）这里也不是首元素的地址 而表示整个数
组 计算的也是这个数组大小
除此之外都是首元素地址 

1.指针加减指针
指针减指针运算  其实得到的是中间的元素个数
但是指针必须指向同一块空间（同一个数组之类的）
#include <stdio.h>
int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	printf("%d\n", &arr[9] - arr);
	return 0;
}

2.指针加减整数
//#include <stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int *p = arr;
//	for ( i = 0; i < sz; i++)
//	{
//		printf("%d\n", *p);
//		p++;
//	}
//	return 0;
//}

3.指针的关系运算
#include <stdio.h>
//int main()
//{
//	float arr[5];
//	float*p;
//	for (p = &arr[5]; p > &arr[0];)
//	{
//		*--p = 0;
//	}
//	return 0;
//}


  
  二级指针
指针也让是一种变量 所以指针也要开辟空间 也可以被取地址
所以就叫二级指针 可以一次类推 三级指针 四级指针等等

  指针数组
是用来存放指针的数组 本质是数组
  数组指针
本质是指针