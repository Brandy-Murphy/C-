1.项目 ->属性 -> c/c++ -> 预处理器 -> 点击预处理器定义，加入_CRT_SECURE_NO_WARNINGS



\? 在书写连续多个问号时使用，防止他们被解析成三字母词
\' 用于表示字符常量'
\“ 用于表示一个字符串内部的双引号
\\ 用于表示一个反斜杠，防止它被解释为一个转义序列符。
\a 警告字符，蜂鸣
\b 退格符
\f 进纸符
\n 换行
\r 回车
\t 水平制表符
\v 垂直制表符
\ddd ddd表示1~3个八进制的数字。 如： \130 X
\xdd dd表示2个十六进制数字。 如： \x30 0


int a = (int)2.1;//()强行赋值符



关系操作符

>  大于
>=大于等于
<  小于
<=  小于等于
！=  用于测试不等于
==  用于测试等于



逻辑操作符

&&  逻辑与-并且  0--表示假
只要有一个为假，结果为假。
||      逻辑或-或者  非零--表示真
两个里面只要有一个为真，结果为真。



条件操作符

exp1？exp2：exp3
如果结果为真执行exp2，为假执行exp3 


	
逗号操作符

exp1，exp2，exp3,.......expn



下标引用、函数调用和结构成员

[]  ()  .  ->
1.
[]
int a[6] = {0};
	a[2];//-下表引用操作符。
2.()
int add(int a, int b) 
{
	int x = a + b;
	return x;
}
int main() 
{
	int a = 10;
	int b = 20;
	int sum = 0;
	sum = add(a,b);//（）---函数调用操作符。
	return 0;
}



原码   —>  反码  —> 补码

只要是整数，内存中存储的都是二进制补码
正数原码-补码-反码相同，三码统一。
负数存的一定是补码。
原码：直接按照正负写出的二级制序列。
反码：原码的符号位不变，其他按位取反得到的。
补码：反码加一得到的。


常见关键字：typrdf（用法如下）
int main() 
{   //typrdf-类型定义-给一个类型重新定义名称，意义不变。
	typedef unsigned int u_int;
	unsigned int num = 2;
	u_int num2 = 3; //此时n_int=unsigned int;

}
static（用法如下）
//1，修饰局部变量，局部周期生命变长。
//2，修饰全局变量时，会改变变量作用域，让静态的全局变量只能自己所在源文件内部使用
//3，改变函数的链接属性。也可以修饰函数，作用与变量一样，改变函数的链接属性。
外部属性链接—>内部属性链接。
void test()
{
	static int a = 1;
	a++;
	printf("a=%d\n",a);

}
int main() 
{
	int x = 0;
	while (x < 5)
	{
		test();
		x++;
	}
}


#define定义一个宏变量，带参数。
示例如下：
Max(int x, int y) 
{
	if (x > y) 
	{
		return x;
	}
	else
	{
		return y;
	}
}
#define MAX(x, y)(x > y ? x:y)
int main() 
{
	int a = 20;
	int b = 30;
	int max = Max(a,b);
	printf("较大值为%d\n",max);
	max = MAX(a,b);
	printf("较大值为%d\n", max);
	return 0;
}


结构体
人和书都是复杂对象

名字+身高+年龄+身份证号
书名+作者+出版社+定价
复杂对象--就是结构体-我们自己创建出来的
用法展示：
struct book //struct 创建一个结构体。
{
	char name[20];
	short price;
};//封号不可缺少！用来结束这个定义。
int main() 
{    //利用结构体类型，创建一个该类型的结构体变量。
	struct book a1 = {"暗杀大师",23};
	struct book*pd = &a1;//结构体创建指针变量的方式。
	printf("书名是:%s\n价格是%d\n", a1.name,a1.price);
	printf("书名是:%s\n价格是%d\n", (*pd).name,(*pd).price);//指针 结构体打印方式
	//.   结构体变量.成员
	//->  结构体指针->成员
	printf("书名是:%s\n价格是%d\n",pd->name,pd->price);
	return 0;
}



c语言三种结构体
什么是语句？
C语言中，有一个封号隔开，隔开的就是语句；

1.顺序结构：从头执行到尾。
2.选择结构：if,else，switch
if else用法
（1
int main() 
{
	int age = 888;
	if (age < 18)//如果为真，就执行它。
		printf("未成年\n");
	else if (age > 18 && age < 26)//否则并且为真 执行它。
	         //不能写为(18<age<26)否则会出现逻辑问题，按以上格式写。
		printf("青年");
	else//否则，就执行它.
		printf("壮年人\n");
	return 0;
}
（2
int main()
{
	int a = 0;
	int b = 2;  //这叫架空else。
	if (a == 1)//else不和这个if匹配 所以不显示打印结果。如果想与第一个if匹配，给第二个if加大括号
		if (b == 2)
			printf("hello\n");
		else//else只和距离最近且没有被匹配的if匹配。
			printf("hehe\n");
	return 0;
}
switch 多分支语句 case 语句项  break 跳出多分支循环 default 输入case语句之外的内容执行它。
int main() 
{
	int day;//switch语句只能定义整型。不能用浮点型小鼠。
	scanf("%d",&day);
	switch (day)
	{
	case 1://也只能定义整数常量 
		printf("周一\n");
		break;
	case 2:
		printf("周二\n");
		break;
	case 3:
		printf("周三\n");
		break;
	case 4:
		printf("周四\n");
		break;
	case 5:
		printf("周五\n");
		break;
	case 6:
		printf("周六\n");
		break;
	case 7:
		printf("周七\n");
		break;
	default：
		printf("输入错误\n");
		break;
	}
	return 0;
}

3.循环结构：while，for，do while
while 循环语句 ，条件为真循环执行
break 永久终止循环
continue 终止本次循环后面的代码，直接进入下一次判断部分。
int main ()
{
	int i = 0;
	while (i <= 10)
	{
		i++;
		if (i == 3)
		continue;//终止此代码后面的运算。直接加入到下一个循环的判断部分。
		printf("%d ", i);
		

	}
	return 0;
}

 getchar()//接受字符，用于接受键盘输入的字符串
putchar();//输出字符，打印字符时，作用与printf一样
int main()
{
	int ch = getchar();//接受字符，用于接受键盘输入的字符串
	putchar(ch);//输出字符，打印字符时，作用与printf一样
	return 0;
}

int main()
{
	int ch;
	while ((ch=getchar())!=EOF)//EOF:END OF FILE文件结束标志 若要停止，需要输入ctrl+z
	{
		putchar (ch);
	}
	return 0;
}

for循环（最常用的）
for（表达式1;表达式2;表达式3）
循环语句;
表达式1为初始化部分，用于初始化循环变量
表达式2用于条件判断部分，用于循环终止时候
表达式3为调整部分，用于调整循环变量。
（1最好不要在for体内修改变量。
（2建议for语句的循环控制变量采用“前闭后开区间”写法。 
//#include <stdio.h>
//
//int main()
//{         //初始化  判断    调整
//	for (int i = 1; i <= 10; i++)
//	{
//		if (i == 5)
//			break;
//		printf("%d\n", i);
//	}
//	return 0;
//}

//#include <stdio.h>
//
//int main()
//{         //初始化  判断    调整
//	for (int i = 1; i <= 10; i++)
//	{
//		if (i == 5)
//			continue;
//		printf("%d\n", i);
//	}
//	return 0;
//}

#include <stdio.h>
//for也可以使用两个变量控制循环 
//for循环的初始化 判断 循环都可以省略 如果判断部分被省略，结果恒为真
int main()
{
	for(;;)
	{
		printf("hello");
	}
	return 0;
}

#include <stdio.h>
int main()
{
	for (int i=0;i<10;i++)
	{
		for (int j = 0; j < 10; j++)
		{
			printf("haha\n");
		}
	}
	return 0;
}

do while循环语句
do 负责调整 while负责判断
#include <stdio.h>

int main()
{
	int a=1;
	do
	{
		printf("%d\n", a);
		a++;
	} 
	while (a<10);
}


字符串判断条件
==不能原来判断字符串是否相等，判断字符串要用函数strcmp
if (strcmp(passworld,"123456")==0)

goto语句：
容易泛滥，尽量少使用goto语句。、
可以跳转到指定代码

用法
int main()
{
	here:
	printf("hello wrold\n");
	goto here;
	return 0;
}